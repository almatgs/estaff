"META:NAMESPACE:ui_server_print_utils"


"META:ALLOW-CALL-FROM-CLIENT:1"
function BuildPrintableFileFromWorksheetData( worksheetData )
{
	destStream = new BufStream;
	ExportWorksheetDataToXmp( worksheetData, destStream );

	xmpStr = destStream.DetachStr();
	PutUrlData( 'x-local://Logs/zz_report.xmp', xmpStr );

	rtfStr = ReportToRtf( xmpStr );

	destDir = 'x-local://share/uploaded_files/' + UniqueStrID( 32 );
	destFileUrl = destDir + '/Print.rtf';
	ObtainDirectory( destDir, true );

	PutUrlData( destFileUrl, rtfStr );

	respInfo = new Object;
	respInfo.fileUrl = destFileUrl;
	return respInfo;
}


function ExportWorksheetDataToXmp( worksheetData, destStream )
{
	destStream.WriteStr( '<SPXML-PRINT LANDSCAPE="1">\r\n' );
	destStream.WriteStr( '<FORMAT FONT-NAME="Arial" FONT-SIZE="8" SPACE-BEFORE="2" SPACE-AFTER="2">\r\n' );

	destStream.WriteStr( '<TABLE TABLE-BORDER="double" CELL-BORDER="single">\r\n' );

	destStream.WriteStr( '<COLGROUP>\r\n' );

	for ( column in worksheetData.columns )
	{
		destStream.WriteStr( '<COL WIDTH="' + column.width + '"/>\r\n' );
	}

	destStream.WriteStr( '</COLGROUP>\r\n' );

	rowIndex = 0;

	for ( row in worksheetData.rows )
	{
		if ( worksheetData.header_rows_num != undefined && rowIndex < worksheetData.header_rows_num )
			ExportWorksheetDataHeaderRowToXmp( worksheetData, destStream, row );
		else
			ExportWorksheetDataRowToXmp( worksheetData, destStream, row );

		rowIndex++;
	}

	destStream.WriteStr( '</TABLE>\r\n' );

	destStream.WriteStr( '</FORMAT>\r\n' );
	destStream.WriteStr( '</SPXML-PRINT>\r\n' );
	return;



	columnWidths = new Array;

	sumFixedWidth = 0;

	for ( i = 0; i < worksheetData.columns.length; i++ )
	{
		columnSpec = worksheetData.columns[i];
		if ( ( obj = StrOptScan( columnSpec.width, '%szr' ) ) != undefined )
			width = Int( obj[0] );
		else if ( ( obj = StrOptScan( columnSpec.width, '%szrc' ) ) != undefined )
			width = Int( obj[0] );
		else if ( ( obj = StrOptScan( columnSpec.width, '%s%%' ) ) != undefined )
			continue;
		else
			width = 30;

		columnWidths[i] = width;
		sumFixedWidth += width;
	}

	restWidth = Max( 170 - sumFixedWidth, 50 );

	for ( i = 0; i < worksheetData.columns.length; i++ )
	{
		columnSpec = worksheetData.columns[i];
		if ( ( obj = StrOptScan( columnSpec.width, '%s%%' ) ) != undefined )
			width = ( restWidth * Int( obj[0] ) ) / 100;
		else
			continue;

		//DebugMsg( columnSpec.width + ' ' + width );
		columnWidths[i] = width;
	}

	excelBuilder.SetColumnWidths( columnWidths );
}


function ExportWorksheetDataHeaderRowToXmp( worksheetData, destStream, row )
{
	destStream.WriteStr( '<TR>\r\n' );

	for ( cell in row.cells )
	{
		destStream.WriteStr( '<TD ROW-BORDER="double" SHADING="25">\r\n' );
		destStream.WriteStr( cell.value );
		destStream.WriteStr( '</TD>\r\n' );
	}

	destStream.WriteStr( '</TR>\r\n' );
}


function ExportWorksheetDataRowToXmp( worksheetData, destStream, row )
{
	destStream.WriteStr( '<TR>\r\n' );

	for ( cell in row.cells )
	{
		destStream.WriteStr( '<TD' );

		if ( cell.bk_color != undefined )
			destStream.WriteStr( ' BK-COLOR="' + cell.bk_color + '"' );

		destStream.WriteStr( '>\r\n' );

		destStream.WriteStr( cell.value );
		destStream.WriteStr( '</TD>\r\n' );
	}

	destStream.WriteStr( '</TR>\r\n' );
}


